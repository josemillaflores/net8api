@page "/pagos"
@using BlazorFrontend.Models
@using BlazorFrontend.Services
@inject ApiPagoService PagoService

<PageTitle>Pagos</PageTitle>

<h1>üí≥ Historial de Pagos</h1>

<div class="row mt-4">
    <div class="col-12">
        <div class="card">
            <div class="card-header d-flex justify-content-between align-items-center">
                <h5>Pagos Procesados</h5>
                <div>
                    <span class="badge bg-primary me-2">Total: @(pagos?.Count ?? 0)</span>
                    <button class="btn btn-outline-primary btn-sm" @onclick="CargarPagos" disabled="@cargando">
                        @if (cargando)
                        {
                            <span class="spinner-border spinner-border-sm" role="status"></span>
                        }
                        else
                        {
                            <span>üîÑ Actualizar</span>
                        }
                    </button>
                </div>
            </div>
            <div class="card-body">
                @if (pagos == null)
                {
                    <div class="text-center">
                        <div class="spinner-border text-primary" role="status">
                            <span class="visually-hidden">Cargando...</span>
                        </div>
                        <p>Cargando pagos...</p>
                    </div>
                }
                else if (!pagos.Any())
                {
                    <div class="alert alert-info text-center">
                        <h6>üì≠ No hay pagos registrados</h6>
                        <p class="mb-0">Los pagos procesados desde pedidos aparecer√°n aqu√≠.</p>
                    </div>
                }
                else
                {
                    <div class="table-responsive">
                        <table class="table table-striped table-hover">
                            <thead class="table-dark">
                                <tr>
                                    <th>ID Pago</th>
                                    <th>ID Pedido</th>
                                    <th>ID Cliente</th>
                                    <th>Monto</th>
                                    <th>Forma Pago</th>
                                    <th>Fecha</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var pago in pagos.OrderByDescending(p => p.FechaPago))
                                {
                                    <tr>
                                        <td><strong>#@pago.IdPago</strong></td>
                                        <td>Pedido #@pago.IdPedido</td>
                                        <td>Cliente #@pago.IdCliente</td>
                                        <td class="fw-bold text-success">@pago.MontoPago.ToString("C")</td>
                                        <td>
                                            <span class="badge bg-info">@pago.FormaPagoDescripcion</span>
                                        </td>
                                        <td>@pago.FechaPago.ToString("g")</td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>
                }
            </div>
        </div>
    </div>
</div>

@code {
    private List<Pago>? pagos;
    private bool cargando = false;

    protected override async Task OnInitializedAsync()
    {
        await CargarPagos();
    }

    private async Task CargarPagos()
    {
        cargando = true;
        StateHasChanged();

        try
        {
            pagos = await PagoService.ObtenerPagosAsync();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"‚ùå Error cargando pagos: {ex.Message}");
            pagos = new List<Pago>();
        }
        finally
        {
            cargando = false;
            StateHasChanged();
        }
    }
}