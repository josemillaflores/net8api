@page "/pedidos"
@using BlazorFrontend.Models
@using BlazorFrontend.Services
@using Microsoft.Extensions.Logging
@inject ApiPedidosService PedidosService
@inject NavigationManager Navigation
@inject ILogger<Pedidos> Logger

<AuthorizeView>
    <Authorized>
        <PageTitle>Pedidos</PageTitle>

        <h1>üì¶ Gesti√≥n de Pedidos</h1>

        <div class="row">
            <!-- Formulario para crear nuevo pedido -->
            <div class="col-md-6">
                <div class="card">
                    <div class="card-header bg-primary text-white">
                        <h5 class="mb-0">‚ûï Crear Nuevo Pedido</h5>
                    </div>
                    <div class="card-body">
                        <div class="mb-3">
                            <label class="form-label">ID Cliente *</label>
                            <input type="number" class="form-control" @bind="nuevoPedido.IdCliente" 
                                   placeholder="Ej: 1, 2, 3..." />
                            <div class="form-text">Ingrese el ID del cliente</div>
                        </div>
                        
                        <div class="mb-3">
                            <label class="form-label">Monto del Pedido *</label>
                            <div class="input-group">
                                <span class="input-group-text">$</span>
                                <input type="number" step="0.01" class="form-control" @bind="nuevoPedido.MontoPago" 
                                       placeholder="Ej: 150.00" />
                            </div>
                            <div class="form-text">Monto total del pedido</div>
                        </div>
                        
                        <div class="mb-3">
                            <label class="form-label">Forma de Pago *</label>
                            <select class="form-select" @bind="nuevoPedido.FormaPago">
                                <option value="0">Seleccione forma de pago</option>
                                <option value="1">üíµ Efectivo</option>
                                <option value="2">üí≥ Tarjeta de Cr√©dito</option>
                                <option value="3">üè¶ Tarjeta de D√©bito</option>
                                <option value="4">üì± Transferencia</option>
                            </select>
                        </div>
                        
                        <div class="d-grid gap-2">
                            <button class="btn btn-success" @onclick="ProcesarPedido" disabled="@procesando">
                                @if (procesando)
                                {
                                    <span class="spinner-border spinner-border-sm" role="status"></span>
                                    <span> Procesando Pedido...</span>
                                }
                                else
                                {
                                    <span>üöÄ Procesar Pedido</span>
                                }
                            </button>
                            
                            <button class="btn btn-outline-secondary" @onclick="LimpiarFormulario">
                                üßπ Limpiar Formulario
                            </button>
                        </div>
                    </div>
                </div>

                <!-- Resultado del procesamiento -->
                @if (!string.IsNullOrEmpty(mensajeResultado) || !string.IsNullOrEmpty(mensajeError))
                {
                    <div class="mt-3">
                        @if (!string.IsNullOrEmpty(mensajeResultado))
                        {
                            <div class="alert alert-success alert-dismissible fade show">
                                <h6>‚úÖ Pedido Procesado Exitosamente</h6>
                                @mensajeResultado
                                <button type="button" class="btn-close" @onclick="LimpiarMensajes"></button>
                            </div>
                        }
                        @if (!string.IsNullOrEmpty(mensajeError))
                        {
                            <div class="alert alert-danger alert-dismissible fade show">
                                <h6>‚ùå Error en el Procesamiento</h6>
                                @mensajeError
                                <button type="button" class="btn-close" @onclick="LimpiarMensajes"></button>
                            </div>
                        }
                    </div>
                }
            </div>

            <!-- Lista de pedidos existentes -->
            <div class="col-md-6">
                <div class="card">
                    <div class="card-header bg-info text-white d-flex justify-content-between align-items-center">
                        <h5 class="mb-0">üìã Lista de Pedidos</h5>
                        <button class="btn btn-light btn-sm" @onclick="CargarPedidos" disabled="@cargandoPedidos">
                            @if (cargandoPedidos)
                            {
                                <span class="spinner-border spinner-border-sm" role="status"></span>
                            }
                            else
                            {
                                <span>üîÑ Actualizar</span>
                            }
                        </button>
                    </div>
                    <div class="card-body">
                        @if (cargandoPedidos)
                        {
                            <div class="text-center">
                                <div class="spinner-border text-primary" role="status">
                                    <span class="visually-hidden">Cargando...</span>
                                </div>
                                <p class="mt-2">Cargando pedidos...</p>
                            </div>
                        }
                        else if (todosLosPedidos == null || !todosLosPedidos.Any())
                        {
                            <div class="text-center text-muted">
                                <p>üì≠ No hay pedidos registrados</p>
                                <button class="btn btn-primary btn-sm" @onclick="CargarPedidos">
                                    Cargar Pedidos
                                </button>
                            </div>
                        }
                        else
                        {
                            <div class="table-responsive">
                                <table class="table table-striped table-hover">
                                    <thead class="table-dark">
                                        <tr>
                                            <th>ID</th>
                                            <th>Fecha</th>
                                            <th>Cliente</th>
                                            <th>Monto</th>
                                            <th>Pago</th>
                                            <th>Acciones</th>
                                        </tr>
                                    </thead>
                                    <tbody>
                                        @foreach (var pedido in pedidosPaginados)
                                        {
                                            <tr>
                                                <td>
                                                    <strong>@pedido.IdPedido</strong>
                                                </td>
                                                <td>
                                                    <small>@pedido.FechaPedido.ToString("dd/MM/yyyy HH:mm")</small>
                                                </td>
                                                <td>@pedido.IdCliente</td>
                                                <td>
                                                    <span class="badge bg-success">$@pedido.MontoPedido.ToString("N2")</span>
                                                </td>
                                                <td>
                                                    @switch (pedido.FormaPago)
                                                    {
                                                        case 1: <span class="badge bg-secondary">Efectivo</span>; break;
                                                        case 2: <span class="badge bg-primary">Cr√©dito</span>; break;
                                                        case 3: <span class="badge bg-info">D√©bito</span>; break;
                                                        case 4: <span class="badge bg-warning">Transferencia</span>; break;
                                                        default: <span class="badge bg-light text-dark">Desconocido</span>; break;
                                                    }
                                                </td>
                                                <td>
                                                    <button class="btn btn-sm btn-outline-primary" 
                                                            @onclick="() => VerDetalles(pedido)"
                                                            title="Ver detalles">
                                                        üëÅÔ∏è
                                                    </button>
                                                </td>
                                            </tr>
                                        }
                                    </tbody>
                                </table>
                                
                                <!-- Controles de Paginaci√≥n Simple -->
                                @if (todosLosPedidos.Any() && totalPaginas > 1)
                                {
                                    <div class="d-flex justify-content-between align-items-center mt-3">
                                        <div>
                                            <small class="text-muted">
                                                Mostrando <strong>@pedidosPaginados.Count</strong> de <strong>@todosLosPedidos.Count</strong> pedidos
                                            </small>
                                        </div>
                                        
                                        <nav>
                                            <ul class="pagination pagination-sm mb-0">
                                                <li class="page-item @(paginaActual == 1 ? "disabled" : "")">
                                                    <button class="page-link" @onclick="() => CambiarPagina(paginaActual - 1)" 
                                                            disabled="@(paginaActual == 1)">
                                                        ‚Äπ Anterior
                                                    </button>
                                                </li>
                                                
                                                <li class="page-item disabled">
                                                    <span class="page-link">@paginaActual de @totalPaginas</span>
                                                </li>
                                                
                                                <li class="page-item @(paginaActual == totalPaginas ? "disabled" : "")">
                                                    <button class="page-link" @onclick="() => CambiarPagina(paginaActual + 1)" 
                                                            disabled="@(paginaActual == totalPaginas)">
                                                        Siguiente ‚Ä∫
                                                    </button>
                                                </li>
                                            </ul>
                                        </nav>
                                        
                                        <div>
                                            <small class="text-muted">
                                                10 por p√°gina
                                            </small>
                                        </div>
                                    </div>
                                }
                            </div>
                            
                            <div class="d-flex justify-content-between align-items-center mt-2">
                                <small class="text-muted">
                                    Total de pedidos: <strong>@totalPedidos</strong>
                                </small>
                                <small class="text-muted">
                                    √öltima actualizaci√≥n: @DateTime.Now.ToString("HH:mm:ss")
                                </small>
                            </div>
                        }
                    </div>
                </div>
            </div>
        </div>

        <!-- Informaci√≥n del flujo -->
        <div class="row mt-4">
            <div class="col-12">
                <div class="card">
                    <div class="card-header bg-light">
                        <h5 class="mb-0">üéØ Flujo del Procesamiento</h5>
                    </div>
                    <div class="card-body">
                        <div class="row text-center">
                            <div class="col-md-3">
                                <div class="border rounded p-3 bg-primary text-white">
                                    <h6>Paso 1</h6>
                                    <p class="mb-1">ApiPedidos recibe datos</p>
                                    <small>{IdCliente, MontoPago, FormaPago}</small>
                                </div>
                            </div>
                            <div class="col-md-3">
                                <div class="border rounded p-3 bg-success text-white">
                                    <h6>Paso 2</h6>
                                    <p class="mb-1">Genera ID Pedido</p>
                                    <small>Guarda en BD</small>
                                </div>
                            </div>
                            <div class="col-md-3">
                                <div class="border rounded p-3 bg-warning text-dark">
                                    <h6>Paso 3</h6>
                                    <p class="mb-1">Llama a ApiPago</p>
                                    <small>Procesa el pago</small>
                                </div>
                            </div>
                            <div class="col-md-3">
                                <div class="border rounded p-3 bg-info text-white">
                                    <h6>Paso 4</h6>
                                    <p class="mb-1">Retorna resultado</p>
                                    <small>ID Pedido + ID Pago</small>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </Authorized>
    
    <NotAuthorized>
        <div class="alert alert-warning">
            <h4>üîê Acceso Denegado</h4>
            <p>Debe iniciar sesi√≥n para acceder a la gesti√≥n de pedidos.</p>
        </div>
    </NotAuthorized>
</AuthorizeView>

@code {
    private List<Pedido> todosLosPedidos = new(); // Todos los pedidos
    private List<Pedido> pedidosPaginados = new(); // Pedidos de la p√°gina actual
    private int paginaActual = 1;
    private int tamanoPagina = 10;
    private int totalPaginas = 1;
    private ProcesarPedidoRequest nuevoPedido = new();
    private int totalPedidos = 0;
    private string mensajeResultado = string.Empty;
    private string mensajeError = string.Empty;
    private bool procesando = false;
    private bool cargandoPedidos = false;

    protected override async Task OnInitializedAsync()
    {
        await CargarPedidos();
    }

    private async Task ProcesarPedido()
    {
        if (!ValidarFormulario())
            return;

        procesando = true;
        mensajeResultado = string.Empty;
        mensajeError = string.Empty;
        StateHasChanged();

        try
        {
            var resultado = await PedidosService.ProcesarPedidoAsync(nuevoPedido);
            
            if (resultado != null)
            {
                if (resultado.PedidoId > 0 && resultado.PagoId > 0)
                {
                    mensajeResultado = $"‚úÖ <strong>¬°Pedido creado exitosamente!</strong><br>" +
                                      $"üì¶ <strong>ID Pedido:</strong> {resultado.PedidoId}<br>" +
                                      $"üí≥ <strong>ID Pago:</strong> {resultado.PagoId}<br>" +
                                      $"üë§ <strong>Cliente:</strong> {resultado.NombreCliente}<br>" +
                                      $"üí¨ <strong>Mensaje:</strong> {resultado.Mensaje}<br>" +
                                      $"üïí <strong>Hora:</strong> {resultado.Timestamp:dd/MM/yyyy HH:mm:ss}";
                    
                    // Limpiar formulario pero mantener mensaje
                    nuevoPedido = new ProcesarPedidoRequest();
                    
                    // Recargar la lista de pedidos
                    await CargarPedidos();
                }
                else
                {
                    mensajeResultado = $"‚ö†Ô∏è <strong>Pedido procesado con advertencias</strong><br>" +
                                      $"üì¶ <strong>ID Pedido:</strong> {resultado.PedidoId}<br>" +
                                      $"üí≥ <strong>ID Pago:</strong> {resultado.PagoId}<br>" +
                                      $"üí¨ <strong>Mensaje:</strong> {resultado.Mensaje}";
                }
            }
            else
            {
                mensajeError = "‚ùå No se recibi√≥ respuesta del servidor";
            }
        }
        catch (Exception ex)
        {
            mensajeError = $"‚ùå Error al procesar pedido: {ex.Message}";
            
            if (ex.Message.Contains("Timeout"))
            {
                mensajeError += "<br>‚è∞ El servidor est√° tardando demasiado en responder.";
            }
        }
        finally
        {
            procesando = false;
            StateHasChanged();
        }
    }

    private async Task CargarPedidos()
    {
        cargandoPedidos = true;
        mensajeError = string.Empty;
        StateHasChanged();

        try
        {
            var respuesta = await PedidosService.ObtenerPedidosAsync();
            
            Logger.LogInformation($"üìä DEBUG - Respuesta Count: {respuesta.Count}, Pedidos count: {respuesta.Pedidos?.Count ?? 0}");
            
            todosLosPedidos = respuesta.Pedidos ?? new List<Pedido>();
            totalPedidos = respuesta.Count;
            
            Logger.LogInformation($"üì¶ DEBUG - todosLosPedidos count: {todosLosPedidos.Count}");
            Logger.LogInformation($"üì¶ DEBUG - Primer pedido ID: {todosLosPedidos.FirstOrDefault()?.IdPedido}");
            
            AplicarPaginacion();
            
            Logger.LogInformation($"üìÑ DEBUG - pedidosPaginados count: {pedidosPaginados.Count}");
            Logger.LogInformation($"üî¢ DEBUG - P√°gina {paginaActual} de {totalPaginas}");
        }
        catch (Exception ex)
        {
            mensajeError = $"‚ùå Error al cargar pedidos: {ex.Message}";
            Logger.LogError(ex, "Error cargando pedidos");
            
            // Datos de ejemplo
            todosLosPedidos = ObtenerPedidosEjemplo();
            totalPedidos = todosLosPedidos.Count;
            AplicarPaginacion();
        }
        finally
        {
            cargandoPedidos = false;
            StateHasChanged();
        }
    }

    private void AplicarPaginacion()
    {
        if (todosLosPedidos == null)
        {
            todosLosPedidos = new List<Pedido>();
        }
        
        // Calcular total de p√°ginas
        totalPaginas = (int)Math.Ceiling((double)todosLosPedidos.Count / tamanoPagina);
        if (totalPaginas == 0) totalPaginas = 1;
        
        // Asegurar que la p√°gina actual sea v√°lida
        if (paginaActual > totalPaginas)
            paginaActual = totalPaginas;
        if (paginaActual < 1)
            paginaActual = 1;
        
        // Obtener pedidos de la p√°gina actual
        var indiceInicio = (paginaActual - 1) * tamanoPagina;
        pedidosPaginados = todosLosPedidos
            .Skip(indiceInicio)
            .Take(tamanoPagina)
            .ToList();
            
        Logger.LogInformation($"üîÑ Paginaci√≥n aplicada - P√°gina {paginaActual}, Mostrando {pedidosPaginados.Count} de {todosLosPedidos.Count} pedidos");
    }

    private List<Pedido> ObtenerPedidosEjemplo()
    {
        var pedidos = new List<Pedido>();
        var random = new Random();
        
        for (int i = 1; i <= 37; i++)
        {
            pedidos.Add(new Pedido
            {
                IdPedido = 7000 + i,
                FechaPedido = DateTime.Now.AddDays(-random.Next(30)),
                IdCliente = random.Next(1, 10),
                MontoPedido = random.Next(50, 1000),
                FormaPago = random.Next(1, 4)
            });
        }
        
        return pedidos.OrderByDescending(p => p.FechaPedido).ToList();
    }

    private bool ValidarFormulario()
    {
        if (nuevoPedido.IdCliente <= 0)
        {
            mensajeError = "‚ùå El ID Cliente debe ser mayor a 0";
            return false;
        }

        if (nuevoPedido.MontoPago <= 0)
        {
            mensajeError = "‚ùå El monto debe ser mayor a 0";
            return false;
        }

        if (nuevoPedido.FormaPago == 0)
        {
            mensajeError = "‚ùå Seleccione una forma de pago";
            return false;
        }

        return true;
    }

    private void LimpiarFormulario()
    {
        nuevoPedido = new ProcesarPedidoRequest();
        mensajeResultado = string.Empty;
        mensajeError = string.Empty;
        StateHasChanged();
    }

    private void LimpiarMensajes()
    {
        mensajeResultado = string.Empty;
        mensajeError = string.Empty;
        StateHasChanged();
    }

    private void VerDetalles(Pedido pedido)
    {
        Navigation.NavigateTo($"/pedidos/{pedido.IdPedido}");
    }

    private void CambiarPagina(int nuevaPagina)
    {
        if (nuevaPagina >= 1 && nuevaPagina <= totalPaginas)
        {
            paginaActual = nuevaPagina;
            AplicarPaginacion();
            StateHasChanged();
        }
    }
}